{"/home/travis/build/npmtest/node-npmtest-chai-as-promised/test.js":"/* istanbul instrument in package npmtest_chai_as_promised */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-chai-as-promised/lib.npmtest_chai_as_promised.js":"/* istanbul instrument in package npmtest_chai_as_promised */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_chai_as_promised = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_chai_as_promised = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-chai-as-promised/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-chai-as-promised && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_chai_as_promised */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_chai_as_promised\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_chai_as_promised.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_chai_as_promised.rollup.js'] =\n            local.assetsDict['/assets.npmtest_chai_as_promised.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_chai_as_promised.__dirname +\n                    '/lib.npmtest_chai_as_promised.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-chai-as-promised/chai-as-promised/lib/chai-as-promised.js":"\"use strict\";\nvar checkError = require(\"check-error\");\n\nmodule.exports = function (chai, utils) {\n    var Assertion = chai.Assertion;\n    var assert = chai.assert;\n\n    // If we are using a version of Chai that has checkError on it,\n    // we want to use that version to be consistent. Otherwise, we use\n    // what was passed to the factory.\n    if (utils.checkError) {\n        checkError = utils.checkError;\n    }\n\n    function isLegacyJQueryPromise(thenable) {\n        // jQuery promises are Promises/A+-compatible since 3.0.0. jQuery 3.0.0 is also the first version\n        // to define the catch method.\n        return typeof thenable.catch !== \"function\" &&\n               typeof thenable.always === \"function\" &&\n               typeof thenable.done === \"function\" &&\n               typeof thenable.fail === \"function\" &&\n               typeof thenable.pipe === \"function\" &&\n               typeof thenable.progress === \"function\" &&\n               typeof thenable.state === \"function\";\n    }\n\n    function assertIsAboutPromise(assertion) {\n        if (typeof assertion._obj.then !== \"function\") {\n            throw new TypeError(utils.inspect(assertion._obj) + \" is not a thenable.\");\n        }\n        if (isLegacyJQueryPromise(assertion._obj)) {\n            throw new TypeError(\"Chai as Promised is incompatible with thenables of jQuery<3.0.0, sorry! Please \" +\n                                \"upgrade jQuery or use another Promises/A+ compatible library (see \" +\n                                \"http://promisesaplus.com/).\");\n        }\n    }\n\n    function method(name, asserter) {\n        utils.addMethod(Assertion.prototype, name, function () {\n            assertIsAboutPromise(this);\n            return asserter.apply(this, arguments);\n        });\n    }\n\n    function property(name, asserter) {\n        utils.addProperty(Assertion.prototype, name, function () {\n            assertIsAboutPromise(this);\n            return asserter.apply(this, arguments);\n        });\n    }\n\n    function doNotify(promise, done) {\n        promise.then(function () { done(); }, done);\n    }\n\n    // These are for clarity and to bypass Chai refusing to allow `undefined` as actual when used with `assert`.\n    function assertIfNegated(assertion, message, extra) {\n        assertion.assert(true, null, message, extra.expected, extra.actual);\n    }\n\n    function assertIfNotNegated(assertion, message, extra) {\n        assertion.assert(false, message, null, extra.expected, extra.actual);\n    }\n\n    function getBasePromise(assertion) {\n        // We need to chain subsequent asserters on top of ones in the chain already (consider\n        // `eventually.have.property(\"foo\").that.equals(\"bar\")`), only running them after the existing ones pass.\n        // So the first base-promise is `assertion._obj`, but after that we use the assertions themselves, i.e.\n        // previously derived promises, to chain off of.\n        return typeof assertion.then === \"function\" ? assertion : assertion._obj;\n    }\n\n    function getReasonName(reason) {\n        return (reason instanceof Error) ? reason.toString() : checkError.getConstructorName(reason);\n    }\n\n    // Grab these first, before we modify `Assertion.prototype`.\n\n    var propertyNames = Object.getOwnPropertyNames(Assertion.prototype);\n\n    var propertyDescs = {};\n    propertyNames.forEach(function (name) {\n        propertyDescs[name] = Object.getOwnPropertyDescriptor(Assertion.prototype, name);\n    });\n\n    property(\"fulfilled\", function () {\n        var that = this;\n        var derivedPromise = getBasePromise(that).then(\n            function (value) {\n                assertIfNegated(that,\n                                \"expected promise not to be fulfilled but it was fulfilled with #{act}\",\n                                { actual: value });\n                return value;\n            },\n            function (reason) {\n                assertIfNotNegated(that,\n                                   \"expected promise to be fulfilled but it was rejected with #{act}\",\n                                   { actual: getReasonName(reason) });\n                return reason;\n            }\n        );\n\n        module.exports.transferPromiseness(that, derivedPromise);\n    });\n\n    property(\"rejected\", function () {\n        var that = this;\n        var derivedPromise = getBasePromise(that).then(\n            function (value) {\n                assertIfNotNegated(that,\n                                   \"expected promise to be rejected but it was fulfilled with #{act}\",\n                                   { actual: value });\n                return value;\n            },\n            function (reason) {\n                assertIfNegated(that,\n                                \"expected promise not to be rejected but it was rejected with #{act}\",\n                                { actual: getReasonName(reason) });\n\n                // Return the reason, transforming this into a fulfillment, to allow further assertions, e.g.\n                // `promise.should.be.rejected.and.eventually.equal(\"reason\")`.\n                return reason;\n            }\n        );\n\n        module.exports.transferPromiseness(that, derivedPromise);\n    });\n\n    method(\"rejectedWith\", function (errorLike, errMsgMatcher, message) {\n        var errorLikeName = null;\n        var negate = utils.flag(this, \"negate\") || false;\n\n        // rejectedWith with that is called without arguments is\n        // the same as a plain \".rejected\" use.\n        if (errorLike === undefined && errMsgMatcher === undefined &&\n            message === undefined) {\n            /* jshint expr: true */\n            this.rejected;\n            return;\n        }\n\n        if (message !== undefined) {\n            utils.flag(this, \"message\", message);\n        }\n\n        if (errorLike instanceof RegExp || typeof errorLike === \"string\") {\n            errMsgMatcher = errorLike;\n            errorLike = null;\n        } else if (errorLike && errorLike instanceof Error) {\n            errorLikeName = errorLike.toString();\n        } else if (typeof errorLike === \"function\") {\n            errorLikeName = checkError.getConstructorName(errorLike);\n        } else {\n            errorLike = null;\n        }\n        var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n\n        var matcherRelation = \"including\";\n        if (errMsgMatcher instanceof RegExp) {\n            matcherRelation = \"matching\";\n        }\n\n        var that = this;\n        var derivedPromise = getBasePromise(that).then(\n            function (value) {\n                var assertionMessage = null;\n                var expected = null;\n\n                if (errorLike) {\n                    assertionMessage = \"expected promise to be rejected with #{exp} but it was fulfilled with \" +\n                                       \"#{act}\";\n                    expected = errorLikeName;\n                } else if (errMsgMatcher) {\n                    assertionMessage = \"expected promise to be rejected with an error \" + matcherRelation +\n                        \" #{exp} but it was fulfilled with #{act}\";\n                    expected = errMsgMatcher;\n                }\n\n                assertIfNotNegated(that, assertionMessage, { expected: expected, actual: value });\n                return value;\n            },\n            function (reason) {\n                var errorLikeCompatible = errorLike && (errorLike instanceof Error ?\n                                                        checkError.compatibleInstance(reason, errorLike) :\n                                                        checkError.compatibleConstructor(reason, errorLike));\n\n                var errMsgMatcherCompatible = errMsgMatcher && checkError.compatibleMessage(reason, errMsgMatcher);\n\n                var reasonName = getReasonName(reason);\n\n                if (negate && everyArgIsDefined) {\n                    if (errorLikeCompatible && errMsgMatcherCompatible) {\n                        that.assert(true,\n                                    null,\n                                    \"expected promise not to be rejected with #{exp} but it was rejected \" +\n                                    \"with #{act}\",\n                                    errorLikeName,\n                                    reasonName);\n                    }\n                }\n                else {\n                    if (errorLike) {\n                        that.assert(errorLikeCompatible,\n                                    \"expected promise to be rejected with #{exp} but it was rejected with #{act}\",\n                                    \"expected promise not to be rejected with #{exp} but it was rejected \" +\n                                    \"with #{act}\",\n                                    errorLikeName,\n                                    reasonName);\n                    }\n\n                    if (errMsgMatcher) {\n                        that.assert(errMsgMatcherCompatible,\n                                    \"expected promise to be rejected with an error \" + matcherRelation +\n                                    \" #{exp} but got #{act}\",\n                                    \"expected promise not to be rejected with an error \" + matcherRelation +\n                                    \" #{exp}\",\n                                    errMsgMatcher,\n                                    checkError.getMessage(reason));\n                    }\n                }\n\n                return reason;\n            }\n        );\n\n        module.exports.transferPromiseness(that, derivedPromise);\n    });\n\n    property(\"eventually\", function () {\n        utils.flag(this, \"eventually\", true);\n    });\n\n    method(\"notify\", function (done) {\n        doNotify(getBasePromise(this), done);\n    });\n\n    method(\"become\", function (value, message) {\n        return this.eventually.deep.equal(value, message);\n    });\n\n    ////////\n    // `eventually`\n\n    // We need to be careful not to trigger any getters, thus `Object.getOwnPropertyDescriptor` usage.\n    var methodNames = propertyNames.filter(function (name) {\n        return name !== \"assert\" && typeof propertyDescs[name].value === \"function\";\n    });\n\n    methodNames.forEach(function (methodName) {\n        Assertion.overwriteMethod(methodName, function (originalMethod) {\n            return function () {\n                doAsserterAsyncAndAddThen(originalMethod, this, arguments);\n            };\n        });\n    });\n\n    var getterNames = propertyNames.filter(function (name) {\n        return name !== \"_obj\" && typeof propertyDescs[name].get === \"function\";\n    });\n\n    getterNames.forEach(function (getterName) {\n        // Chainable methods are things like `an`, which can work both for `.should.be.an.instanceOf` and as\n        // `should.be.an(\"object\")`. We need to handle those specially.\n        var isChainableMethod = Assertion.prototype.__methods.hasOwnProperty(getterName);\n\n        if (isChainableMethod) {\n            Assertion.overwriteChainableMethod(\n                getterName,\n                function (originalMethod) {\n                    return function() {\n                        doAsserterAsyncAndAddThen(originalMethod, this, arguments);\n                    };\n                },\n                function (originalGetter) {\n                    return function() {\n                        doAsserterAsyncAndAddThen(originalGetter, this);\n                    };\n                }\n            );\n        } else {\n            Assertion.overwriteProperty(getterName, function (originalGetter) {\n                return function () {\n                    doAsserterAsyncAndAddThen(originalGetter, this);\n                };\n            });\n        }\n    });\n\n    function doAsserterAsyncAndAddThen(asserter, assertion, args) {\n        // Since we're intercepting all methods/properties, we need to just pass through if they don't want\n        // `eventually`, or if we've already fulfilled the promise (see below).\n        if (!utils.flag(assertion, \"eventually\")) {\n            return asserter.apply(assertion, args);\n        }\n\n        var derivedPromise = getBasePromise(assertion).then(function (value) {\n            // Set up the environment for the asserter to actually run: `_obj` should be the fulfillment value, and\n            // now that we have the value, we're no longer in \"eventually\" mode, so we won't run any of this code,\n            // just the base Chai code that we get to via the short-circuit above.\n            assertion._obj = value;\n            utils.flag(assertion, \"eventually\", false);\n\n            return args ? module.exports.transformAsserterArgs(args) : args;\n        }).then(function (args) {\n            asserter.apply(assertion, args);\n\n            // Because asserters, for example `property`, can change the value of `_obj` (i.e. change the \"object\"\n            // flag), we need to communicate this value change to subsequent chained asserters. Since we build a\n            // promise chain paralleling the asserter chain, we can use it to communicate such changes.\n            return assertion._obj;\n        });\n\n        module.exports.transferPromiseness(assertion, derivedPromise);\n    }\n\n    ///////\n    // Now use the `Assertion` framework to build an `assert` interface.\n    var originalAssertMethods = Object.getOwnPropertyNames(assert).filter(function (propName) {\n        return typeof assert[propName] === \"function\";\n    });\n\n    assert.isFulfilled = function (promise, message) {\n        return (new Assertion(promise, message)).to.be.fulfilled;\n    };\n\n    assert.isRejected = function (promise, errorLike, errMsgMatcher, message) {\n        var assertion = (new Assertion(promise, message));\n        return assertion.to.be.rejectedWith(errorLike, errMsgMatcher, message);\n    };\n\n    assert.becomes = function (promise, value, message) {\n        return assert.eventually.deepEqual(promise, value, message);\n    };\n\n    assert.doesNotBecome = function (promise, value, message) {\n        return assert.eventually.notDeepEqual(promise, value, message);\n    };\n\n    assert.eventually = {};\n    originalAssertMethods.forEach(function (assertMethodName) {\n        assert.eventually[assertMethodName] = function (promise) {\n            var otherArgs = Array.prototype.slice.call(arguments, 1);\n\n            var customRejectionHandler;\n            var message = arguments[assert[assertMethodName].length - 1];\n            if (typeof message === \"string\") {\n                customRejectionHandler = function (reason) {\n                    throw new chai.AssertionError(message + \"\\n\\nOriginal reason: \" + utils.inspect(reason));\n                };\n            }\n\n            var returnedPromise = promise.then(\n                function (fulfillmentValue) {\n                    return assert[assertMethodName].apply(assert, [fulfillmentValue].concat(otherArgs));\n                },\n                customRejectionHandler\n            );\n\n            returnedPromise.notify = function (done) {\n                doNotify(returnedPromise, done);\n            };\n\n            return returnedPromise;\n        };\n    });\n};\n\nmodule.exports.transferPromiseness = function (assertion, promise) {\n    assertion.then = promise.then.bind(promise);\n};\n\nmodule.exports.transformAsserterArgs = function (values) {\n    return values;\n};\n"}